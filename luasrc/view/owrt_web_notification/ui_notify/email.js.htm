<script type="text/javascript">
//<![CDATA[
L.require('ui').then(function(ui) {
	L.require('dom').then(function(dom) {
		L.require("uci").then(function(uci) {
			uci.load("notifyconf").then(function(out){
				var UIEmail = ui.AbstractElement.extend(/** @lends LuCI.ui.Textarea.prototype */ {
					__init__: function(notify_id) {

						this.notify_id = notify_id;
						this.needsToSave = false;
						this.isActive = false;
						this.fields = {};

						// -------------------------------------------------------
						// Change the config, and form fields below
						//--------------------------------------------------------
						this.method = "email"
						this.config = "notifyconf"
						//--------------------------------------------------------

						var section = this.addSection();

						this.fields = {

							"text": new ui.TextFieldStyled(section["text"], { 
								datatype: "rangelength(2,255)",
								//htmlStyle: "width: 60px"
							}),

							"sendto": new ui.TextFieldStyled(section["sendto"], { 
								datatype: "rangelength(2,255)",
								//htmlStyle: "width: 60px"
							}),

							"expression": new ui.TextFieldStyled(section["expression"], { 
								datatype: "rangelength(2,128)",
								//htmlStyle: "width: 60px"
							}),

						}
						//---------------------------------------------------------
					},

					/** @override */
					render: function() {
						var classActive = (this.isActive) ? ' active' : ''
						var container = E('div', { class: 'table modal-section-param ntf email' + classActive}, [
							E('div', {class: 'tr table-titles'}, [
								E('div', {class: 'th', style: 'width: 100%'}, _("Параметры уведомления " + this.method)),
								E('div', {class: 'th', style: "text-align: right;"}, _("Значение")),
							]),
							E('div', {class: 'tr cbi-rowstyle-1'}, [
								E('div', {class: 'td'}, "Текст уведомления"),
								E('div', {class: 'td', style: "text-align: right;"}, [
									this.fields['text'].render()
								])
							]),
							E('div', {class: 'tr cbi-rowstyle-1'}, [
								E('div', {class: 'td'}, "Отправить на адреса"),
								E('div', {class: 'td', style: "text-align: right;"}, [
									this.fields['sendto'].render()
								])
							]),
							E('div', {class: 'tr cbi-rowstyle-1'}, [
								E('div', {class: 'td'}, "Условие"),
								E('div', {class: 'td', style: "text-align: right;"}, [
									this.fields['expression'].render()
								])
							]),
						])
						
						return this.bind(container);
					},


					/** @private */
					bind: function(container) {
						this.node = container
						var self = this

						dom.bindClassInstance(container, this);

						// Cusom override:
						// We subscribe EventBus event which is emitted by "DropdownMethod" widget (see ui_override)
						
						window.EventBus.register(this.node, 'bus-method-changed', [],
							function(ev) {
								if(ev.detail["method"] == 'email') {
									container.classList.add("active")
									self.isActive = true
								} else {
									container.classList.remove("active")
									self.isActive = false
								}
							}
						);
						return container;
					},
					getValue: function() {
						var data = {}
						for (var name in this.fields) {
							data[name] = this.fields[name].getValue() || ''
						}
						return data;
					},

					getFields: function() {
						var data = []
						for (var name in this.fields) {
							//data.push(this.fields[name])
							data.push(name)
						}
						return data;
					},

					// if user filled in method at first time, then
					// we need to prepare uci section initially
					addSection: function() {
						var sec = uci.get(this.config, this.notify_id)
						if(sec == null) {
							sec = uci.add(this.config, this.notify_id)
							sec = uci.get(this.config, this.notify_id)
						}
						return(sec)
					},

					nearleyValidator: function(field, errormsg) {
						return function(user_input_text) {
							// this function is declared at "ui_notify/"notify.valid.js.htm"
							//var gramma = snmp_valid(field)
							//const parser = new nearley.Parser(nearley.Grammar.fromCompiled(gramma));
							//try {
							//	var pf = parser.feed(user_input_text)
							//	if (pf.results.length > 0)
							//		return true // it's a requirement of LuCI widget API
							//	else
							//		return errormsg
							//}
							//catch (e) {
							//	return errormsg
							//}
						}
					}

				});

				ui["email"] = UIEmail
			});
		});
	});
});
//]]>
</script>